import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI
import org.springframework.boot.gradle.tasks.bundling.BootJar

buildscript {
	ext {
		queryDslVersion = "5.0.0"
		restdocsApiSpecVersion = '0.16.2'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'com.epages.restdocs-api-spec' version "0.16.2"
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

java {
	sourceCompatibility = '11'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: "com.ewerk.gradle.plugins.querydsl"

group = 'site.doto'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

swaggerSources {
	sample {
		setInputFile(file("$buildDir/api-spec/openapi3.yaml"))
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation("it.ozimov:embedded-redis:0.7.2")
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'
	implementation 'org.webjars:sockjs-client:1.5.1'
	implementation 'org.webjars:stomp-websocket:2.3.4'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
	implementation 'com.querydsl:querydsl-core'
	implementation 'com.querydsl:querydsl-jpa'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'com.google.code.gson:gson:2.8.9'
	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	implementation 'org.apache.commons:commons-lang3'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.2'
	swaggerUI 'org.webjars:swagger-ui:4.11.1'
 }

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
}

tasks.register('copySwaggerUI', Copy) {
	dependsOn 'generateSwaggerUISample'

	def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()

	from("${generateSwaggerUISampleTask.outputDir}")
	into("${buildDir}/resources/main/static")
}

tasks.withType(BootJar) {
	dependsOn 'copySwaggerUI'
}

tasks.named('jar').configure {
	dependsOn 'copySwaggerUI'
}

tasks.named('bootJarMainClassName').configure {
	dependsOn 'copySwaggerUI'
}

openapi3 {
	setServer("${System.getenv('dotoURI')}")
	title = "restdocs-swagger API Documentation"
	description = "Spring REST Docs with SwaggerUI."
	version = "0.0.1"
	format = "yaml"
}

tasks.withType(Test) {
	systemProperty 'file.encoding', 'UTF-8'
}


//querydsl 추가 시작
def querydslDir = "${buildDir}/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}